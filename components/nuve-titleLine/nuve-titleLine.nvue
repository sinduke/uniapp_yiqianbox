<template>
	<view class="nuve-titleLine">
		<scroller ref="scroller" :style="{width:myWidth/1.6+'px'}" scroll-direction="horizontal" :show-scrollbar="false" style="flex-direction: row;">
			<view class="titles">
				<view class="titleItem" :style="{width:titleItemWidth+'px'}" >
					<view v-for="(item,index) in myList" :key='index'  style="align-items: center;" :style="{marginRight:(myWidth/3)-90+'px'}" ref="tabitem" :id="item.id"> 
						<text v-if="heiye==false" class="TitleName" @click="handleClick(index)" ref='TitleName' :class="[{TitleName1:active==index}]">{{item.name}}</text>
						<text v-else class="TitleName2" @click="handleClick(index)" ref='TitleName' :class="[{TitleName3:active==index}]">{{item.name}}</text>
					</view>
				</view>
				  <view :style="{transform:'translateX('+(widthLine)+'px)',width:linesWidth+'px'}" class="lines" ref="lines"></view>
			</view>
		</scroller>
	</view>
</template>

<script>
	const dom = uni.requireNativePlugin('dom')
	const BindingX = uni.requireNativePlugin('bindingx');
	import common from "@/common/js/common.js";
	export default {
		props: {
			TitleList: {
				type: Array,
				default: () => []
			},
			length:{
				type:Number,
				default:0
			},
			active: {
				type: Number,
				default: 0
			},
			scrollMove: {
				type: Number,
				default: 0
			},
			number: {
				type: Number,
				default: 0
			},
			isActives: {
				default: false
			},
			myWidth:{
				default: uni.getSystemInfoSync().windowWidth
			},
		},
		data() {
			return {
				actives: 0,
				isActive: false,
				widthLine:0,
				titleItemWidth:0,
				linesWidth:0,
				myList:[]
			
			}
		},
		computed: {
			heiye(){
				return uni.getStorageSync('heiye').type
			},
			// widthLine() {
			// 	return this.scrollMove / 3
			// },
			myHeight() {
				return uni.getSystemInfoSync().windowHeight * (750 / uni.getSystemInfoSync().windowWidth)
			},
		},
		methods: {
			// 切换
			handleClick(e) {
				this.$emit('active', e)
				this.$emit('isactive', false)
				this.isActive = false
				 this.widthLine = this.getWidthLines(e)

			},
			getWidthLines(e){
				let width = 0
			     this.myList.map((item,index)=>{
					 if(e>index){
						 width += item.width+(this.myWidth/3)-90
					 }
				 })
				return width
			},
			
			
			getline_Width(index){
				dom.getComponentRect(this.$refs.tabitem[index], res => {
					this.linesWidth = res.size.width 
					 console.log(this.linesWidth,'res.size.width')
				});
			},
			
			getWidth(){	
				this.$refs.tabitem.map((item,index)=>{
					dom.getComponentRect(item, res => {
						this.myList[index].width =  res.size.width
						// console.log(index,this.myList,'this.myList')
						this.titleItemWidth += res.size.width + ( this.myWidth / 3 - 100)
					   
					});
				})
			},
			scrollTabTo(index) {
			  const el = this.$refs.tabitem[index];
			  let offset = 0;
			  // if (index > 0) {
			  //   offset = this.tabbarWidth / 2 - this.tabListSize[index].width / 2;
			  //   if (this.tabListSize[index].right < this.tabbarWidth / 2) {
			  //     offset = this.tabListSize[0].width;
			  //   }
			  // } 
			  dom.scrollToElement(el, { offset});
			},
			switchTab(val){
					console.log(this.widthLine,this.number,this.myWidth,val,'this.widthLine')
				if(this.number==(this.length-1)&&val>0){	
				}else if(this.number==0&&val<0){					
					this.widthLine = 0
				}
				else if(val==0){
					this.widthLine = this.getWidthLines(this.number)
					
				}
				else if(Math.abs(val)>(this.myWidth-4)&&Math.abs(val)<=this.myWidth){
					if(val>0){
						 this.widthLine = this.getWidthLines(this.number+1)
					}else{
						this.widthLine = this.getWidthLines(this.number-1)
					}
				}
				else
				{
					if (this.isActive) {
						this.widthLine = Math.round(this.myWidth / 3 - 50) * this.number + Math.round(val / 5.5)
						
					}
				}	
			}
			
			
			
		},
		watch: {
			active(val) {
				if (val > this.actives) {
					this.actives = val
					this.scrollTabTo(val)
				} else {
					this.scrollTabTo(val-1<0?0:val-1)
				}
				 this.getline_Width(val)
			},
			scrollMove(val) {
				if(this.isActive){
					
	           this.switchTab(val)
				}
			},
			isActives(val) {
				this.isActive = val 
			}
		},
		mounted() {
	    this.myList = JSON.parse(JSON.stringify(this.TitleList))
			setTimeout(()=>{
			  this.getWidth()
			  this.getline_Width(0)
			},100)
			
		}
		
	}
</script>

<style scoped>
	@import '@/common/css/nvue-black.css';
	/* @import '@/common/css/nvue-whith.css'; */
	.lines {
		height: 6rpx;
		background-color: #FF5927;
		/* margin-left: 6px; */
		border-radius: 6rpx;
/* 		transition-property:transform,width;
		transition-duration:0.04s;
		transition-timing-function: cubic-bezier(0, 0, 1, 1); */
	}

	.titleItem {
		flex-direction: row;
		
	}



	.TitleName {
		color: #666666;
		padding-bottom: 10rpx;
		font-weight: 300;
		font-size: 34rpx;
		lines: 1;
		
	}

	.TitleName1 {
		color: #1c1c1c;
		font-weight: 700;
		/* font-size: 40rpx; */
	}
	.TitleName2 {
		color: #C1C1C1;
		padding-bottom: 10rpx;
		font-weight: 300;
		font-size: 34rpx;
		lines: 1;
		
	}
	
	.TitleName3 {
		color: #ffffff;
		font-weight: 700;
		/* font-size: 40rpx; */
	}
</style>
