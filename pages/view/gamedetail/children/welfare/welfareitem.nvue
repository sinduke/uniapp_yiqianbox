
<!-- 福利 -->
<template>
	<view :class="['welfareitem',heiye?'bg':'wg']" >
		<view v-if="pageData.activity.count>0" style="padding: 0 32rpx;">
			<view class="new-list">
				<view v-for="(item,index) in pageData.activity.list" :key="index" class="coupons">
					<view class="title" :style="{width:myWidth-32+'px',borderBottom:heiye?'1px solid #3d3d3d':'1px solid #efefef'}" @click="handleClick(index)">
						<text :class="['title_name',heiye?'isTheme':'noTheme']" :style="{width:myWidth-120+'px'}">{{item.title}}</text>
						<image ref='image' src="@/static/images/999_right.png" mode="widthFix" style="width: 30rpx;height: 30rpx;"></image>
					</view>
					<view class="body" ref="body">
					 <text class="pub_time">{{item.pub_time}}</text>
					 <text :class="['content',heiye?'noActive':'baicolor']" :style="{width:myWidth-32+'px'}">{{item.content.replace(/<[^<>]+>/g,'')}}</text>
					</view>	  
				</view>
			</view>
		</view>
		<myloading v-else :style="{width:myWidth-32+'px'}" :isNoData='true'></myloading>
	</view>

</template>

<script>
	import common from "@/common/js/common.js";
	const BindingX = uni.requireNativePlugin('bindingx');
	import myloading from '@/components/nvue-loading/nvue-loading'
	export default {
		data(){
			return{
				active:-1
			}
		},
		components: {
			myloading,
		},
		computed: {
			heiye(){
				return uni.getStorageSync('heiye').type
			},
			myWidth() {
				return uni.getSystemInfoSync().windowWidth
			},
		},
		
		methods:{
			handleClick(i){
				if(this.active!=i){
					this.active = i
					this.binds(common.getEl(this.$refs.body[i]), 'height', `easeInSine(t,0,800,400)`)
					this.binds(common.getEl(this.$refs.image[i]), 'transform.rotateZ', `easeInSine(t,0,90,400)`)
				}else{
					this.active = -1
					this.binds(common.getEl(this.$refs.body[i]), 'height', `easeInSine(t,800,-800,400)`)
					this.binds(common.getEl(this.$refs.image[i]), 'transform.rotateZ', `easeInSine(t,90,-90,400)`)
				}
			
			},
			//动画
			binds(ref, property, expression, type) {
				let rotatebin = BindingX.bind({
					eventType: 'timing',
					exitExpression: 't>600',
					props: [ //props数组用来描述伴随scroll事件需要改变的元素节点
						{
							element: ref, //动画元素
							property: property, //动画属性
							expression: expression
						}
					]
				}, e => {
					if (e.state === 'start') {
						setTimeout(()=>{
						BindingX.unbind({
							token: rotatebin.token,
							eventType: 'timing'
						})
							
						},600)
					}
				});
			},
		},
		props: {
			pageData: {
				type: Object,
				default: () => {
					return {}
				}
			},
		},
	}
</script>

<style  scoped>
	@import '@/common/css/nvue-black.css';
  .title{
    flex-direction: row;
	align-items: center;
	justify-content: space-between;
	
	padding-bottom: 32rpx;
  }
  .title_name{
	  font-size: 32rpx;
	  font-weight: 700;
	  
	  lines: 1;
	  text-overflow: ellipsis;
  }
  .body{
	  justify-content: flex-start;
	  align-items: flex-start;
	  height: 0;
	  overflow:hidden;
  }
  .pub_time{
	  font-size: 28rpx;
	  font-weight: 400;
	  color: #666;
	  margin-top: 24rpx;
	  margin-left:10rpx
	  
  }
  .content{
	font-weight: 400;
	font-size: 28rpx;
	
  }
</style>
