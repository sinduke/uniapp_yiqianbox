<!-- 通用设置 -->
<template>
	<view :class="['box',heiye?'bg':'wg']"  :style="{height:myHeight+'rpx'}">
		<myNavbar v-if="heiye==false" title='通用设置' :lines="false" :right='false' ></myNavbar>
		<myNavbar v-else title='通用设置' :lines="false" :right='false' ></myNavbar>
		<!-- <gamecell left="开启消息通知"  type="2" :borderBottom="false" :checked=""></gamecell> -->
		<view class="" style="margin-top:168rpx">
			<gamecell left="仅使用WiFi下载"  type="2" :borderBottom="false" :checked="isWifiDown" @change="change1"></gamecell>
		</view>
		<gamecell left="WIFI下自动播放视频"  type="2" :borderBottom="false" :checked="isWifi" @change="change2"></gamecell>
		<gamecell left="下载完成自动安装游戏"  type="2" :borderBottom="false" :checked="isinstallGame" @change="change3"></gamecell>
		<gamecell left="安装完成后自动清除安装包"  type="2" :borderBottom="false" :checked="isClearPackage" @change="change4"></gamecell>
	</view>
</template>

<script>
	import gamecell from '@/components/nvue-cell/nvue-cell.nvue'
	import myNavbar from '@/components/nvue-navbar/nvue-navbar';
	export default {
		data() {
			return {
				isMessage: uni.getStorageSync('isMessage').status,
				isWifiDown: uni.getStorageSync('isWifiDown').status,
				isWifi: uni.getStorageSync('isWifi').status,
				isinstallGame: uni.getStorageSync('isinstallGame').status,
				isClearPackage: uni.getStorageSync('isClearPackage').status,
			}
		},
		computed: {
			heiye(){
				return uni.getStorageSync('heiye').type
			},
			myHeight(){
				return uni.getSystemInfoSync().windowHeight * (750 / uni.getSystemInfoSync().windowWidth)
			} 
		},
		onReady() {
			if(this.heiye){
				uni.setNavigationBarColor({
					frontColor: '#ffffff',
					backgroundColor: '#090909',
				})	
			}
		},
		components:{
			gamecell,
			myNavbar
		},
		methods: {
			change1(msg){
				this.isWifiDown = msg
			},
			change2(msg){
				this.isWifi = msg
			},
			change3(msg){
				this.isinstallGame = msg
			},
			change4(msg){
				this.isClearPackage = msg
			}
			
		},
		watch:{
			isMessage(val) {
				if (val) {
					uni.setStorageSync('isMessage', {
						type: 1,
						status: true
					})
					uni.showToast({
						title: '消息推送已开启',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
				} else {
					uni.setStorageSync('isMessage', {
						type: 2,
						status: false
					})
					uni.showToast({
						title: '消息推送已关闭',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
				}	
			},
			isWifi(val) {
				if (val) {
					uni.setStorageSync('isWifi', {
						type: 1,
						status: true
					})
					uni.showToast({
						title: '非Wifi下自动播放视频',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
				} else {
					uni.setStorageSync('isWifi', {
						type: 2,
						status: false
					})
					uni.showToast({
						title: '非Wifi下不自动播放视频',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
				}
			},
			/* wifi下载 */
			isWifiDown(val) {
				if (val) {
					uni.setStorageSync('isWifiDown', {
						type: 1,
						status: true
					})
					uni.showToast({
						title: '仅使用Wifi下载',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
				} else {
					uni.setStorageSync('isWifiDown', {
						type: 2,
						status: false
					})
					uni.showToast({
						title: '仅使用Wifi下载已关闭',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
				}
			},
			/* 自动安装安装包 */
			isinstallGame(val) {
				if (val) {
					uni.setStorageSync('isinstallGame', {
						type: 1,
						status: true
					})
					uni.showToast({
						title: '自动打开安装包已开启',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
				} else {
					uni.setStorageSync('isinstallGame', {
						type: 2,
						status: false
					})
					uni.showToast({
						title: '自动打开安装包已关闭',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
				}
			},
			/* 自动删除安装包 */
			isClearPackage(val) {
				if (val) {
					uni.setStorageSync('isClearPackage', {
						type: 1,
						status: true
					})
					uni.showToast({
						title: '自动删除安装包已开启',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
				} else {
					uni.setStorageSync('isClearPackage', {
						type: 2,
						status: false
					})
					uni.showToast({
						title: '自动删除安装包已关闭',
						icon: 'none',
						success: () => {
							setTimeout(() => {}, 1200)
						}
					})
	
	
				}
			}
		}
	}
</script>

<style scoped>
	@import '@/common/css/nvue-black.css';
.box{
	
}
</style>
